# copied from
# https://github.com/hoaphanFox/sceptre/blob/ad8908330e8469f8f41f3b7889d7880de6d1b8df/lambda/templates/serverless.yaml#L60
# this file contains a single JS snippet in multi-line block literal format
AWSTemplateFormatVersion: 2010-09-09
Transform: AWS::Serverless-2016-10-31
Description: The AWS CloudFormation template for this Serverless application
Resources:
  ServerlessDeploymentBucket:
    Type: 'AWS::S3::Bucket'
    Properties:
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
  SpekeHandlerLogGroup:
    Type: 'AWS::Logs::LogGroup'
    Properties:
      LogGroupName: /aws/lambda/speke-cpix-spekeHandler
      RetentionInDays: 14
  IamRoleLambdaExecution:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Policies:
        - PolicyName: !Join 
            - '-'
            - - cpix
              - speke
              - lambda
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'logs:CreateLogStream'
                Resource:
                  - !Sub >-
                    arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/speke-cpix*:*
              - Effect: Allow
                Action:
                  - 'logs:PutLogEvents'
                Resource:
                  - !Sub >-
                    arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/speke-cpix*:*:*
      Path: /
      RoleName: !Join 
        - '-'
        - - speke
          - cpix
          - !Ref 'AWS::Region'
          - lambdaRole
  SpekeHandlerLambdaFunction:
    Type: 'AWS::Lambda::Function'
    Properties:
      Code:
        ZipFile: |
          var https = require('https');
          console.log('Loading function');
          module.exports.speke = (event, context, callback) =>  {
          // generic internal error response
          const errorResponse = {
             statusCode: 500,
             headers: {
                 'Content-Type': 'application/xml',
             },
             body: `
             Generic Error. Check host, path, contentId, accountId, authorization are correct. \n ${process.env.TKM_HOST} \n${process.env.TKM_BASIC_AUTH} \n${event.body}`,
          };
              
          // read env. variables
          const tkmHost = process.env.TKM_HOST;
          const tkmBasicAuth = process.env.TKM_BASIC_AUTH;
          if (tkmHost == null || tkmBasicAuth == null) {
             return context.succeed(errorResponse);
          }
           
          // extract AccountId
          console.log("URL PATH:\n" + event.path);
          const requestPath = event.path;
          const matchRes1 = requestPath.match(/\/v1\/([^\/]+)\//);
          var accountId;
          if (matchRes1 != null) {
             accountId = matchRes1[1];  
             console.log("ACCOUNT ID:\n" + accountId);
          } else {
             errorResponse.body += "matchRes1 is null"
             return context.succeed(errorResponse.body);
          }
           
          // extract contentId
          const requestBody = event.body;
          console.log("REQUEST BODY:\n" + requestBody);
          const matchRes2 = requestBody.match(/<\s*cpix:CPIX[^>]*\s*\s*[iI]+d\s*=\s*['"]([^'"]+)['"][^>]*>/);
          var contentId;
          if (matchRes2 != null) {
             contentId = matchRes2[1];
             console.log("CONTENT ID:\n" + contentId);
          } else {
             errorResponse.body += "matchRes2 is null"
             return context.succeed(errorResponse);
          }
           
          // update URL path with contentId
          var options = {
             host: tkmHost,
             port: "443",
             path: "/tkm/v1/" + accountId + "/contents/" + contentId + "/copyProtectionData",
             method: "POST",
             headers: {
                 'Content-Type': 'application/xml',
                 'Authorization': tkmBasicAuth
             }
          };
           
          callback = function(tkmResponse) {
             var responseBody = '';
             tkmResponse.on('data', function (chunk) {
                 responseBody += chunk;
             });
                 
             // The whole response has been received
             tkmResponse.on('end', function () {
                 var output = {
                     statusCode: tkmResponse.statusCode,
                     body: responseBody,
                     headers: tkmResponse.headers
                 };
                       
                 context.succeed(output);
             });
          }  
               
          var req = https.request(options, callback);
          req.write(event.body);
          req.on('error', function(e) {
             console.log('problem with request: ' + e.message);
             errorResponse.body += ('problem with request: ' + e.message);
             return context.succeed(errorResponse); 
          })
          req.end();
          };        
      FunctionName: speke-cpix-spekeHandler
      Handler: handler.speke
      MemorySize: 1024
      Role: !GetAtt 
        - IamRoleLambdaExecution
        - Arn
      Runtime: nodejs8.10
      Timeout: 60
      Environment:
        Variables:
          # TKM_BASIC_AUTH was removed because it was flagged as leaked credentials by GitGuardian
          TKM_HOST: streamotion.stage.ott.irdeto.com
    DependsOn:
      - SpekeHandlerLogGroup
      - IamRoleLambdaExecution
  # SpekeHandlerLambdaVersion0DIRV4BrqTBJ4Z5rbv8Sxu4UDLYA9Nmd3pyfFQ8:
  #   Type: 'AWS::Lambda::Version'
  #   DeletionPolicy: Retain
  #   Properties:
  #     FunctionName: !Ref SpekeHandlerLambdaFunction
  #     CodeSha256: EfG/2PEHFWis5XSVD/jVGdMiIYZoZ5N53jzJGC68Tc4=
  ApiGatewayRestApi:
    Type: 'AWS::ApiGateway::RestApi'
    Properties:
      Name: cpix-speke
      EndpointConfiguration:
        Types:
          - EDGE
  ApiGatewayResourceProxyVar:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      ParentId: !GetAtt 
        - ApiGatewayRestApi
        - RootResourceId
      PathPart: '{proxy+}'
      RestApiId: !Ref ApiGatewayRestApi
  ApiGatewayMethodProxyVarOptions:
    Type: 'AWS::ApiGateway::Method'
    Properties:
      AuthorizationType: NONE
      HttpMethod: OPTIONS
      MethodResponses:
        - StatusCode: '200'
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Credentials: true
          ResponseModels: {}
      RequestParameters: {}
      Integration:
        Type: MOCK
        RequestTemplates:
          application/json: '{statusCode:200}'
        ContentHandling: CONVERT_TO_TEXT
        IntegrationResponses:
          - StatusCode: '200'
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: '''*'''
              method.response.header.Access-Control-Allow-Headers: >-
                'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'
              method.response.header.Access-Control-Allow-Methods: '''OPTIONS,POST'''
              method.response.header.Access-Control-Allow-Credentials: '''false'''
            ResponseTemplates:
              application/json: ''
      ResourceId: !Ref ApiGatewayResourceProxyVar
      RestApiId: !Ref ApiGatewayRestApi
  ApiGatewayMethodProxyVarPost:
    Type: 'AWS::ApiGateway::Method'
    Properties:
      HttpMethod: POST
      RequestParameters: {}
      ResourceId: !Ref ApiGatewayResourceProxyVar
      RestApiId: !Ref ApiGatewayRestApi
      ApiKeyRequired: false
      AuthorizationType: NONE
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Join 
          - ''
          - - 'arn:'
            - !Ref 'AWS::Partition'
            - ':apigateway:'
            - !Ref 'AWS::Region'
            - ':lambda:path/2015-03-31/functions/'
            - !GetAtt 
              - SpekeHandlerLambdaFunction
              - Arn
            - /invocations
      MethodResponses: []
  ApiGatewayDeployment1571314456852:
    Type: 'AWS::ApiGateway::Deployment'
    Properties:
      RestApiId: !Ref ApiGatewayRestApi
      StageName: cpix
    DependsOn:
      - ApiGatewayMethodProxyVarOptions
      - ApiGatewayMethodProxyVarPost
  SpekeHandlerLambdaPermissionApiGateway:
    Type: 'AWS::Lambda::Permission'
    Properties:
      FunctionName: !GetAtt 
        - SpekeHandlerLambdaFunction
        - Arn
      Action: 'lambda:InvokeFunction'
      Principal: apigateway.amazonaws.com
      SourceArn: !Join 
        - ''
        - - 'arn:'
          - !Ref 'AWS::Partition'
          - ':execute-api:'
          - !Ref 'AWS::Region'
          - ':'
          - !Ref 'AWS::AccountId'
          - ':'
          - !Ref ApiGatewayRestApi
          - /*/*
Outputs:
  ServerlessDeploymentBucketName:
    Value: !Ref ServerlessDeploymentBucket
  # SpekeHandlerLambdaFunctionQualifiedArn:
  #   Description: Current Lambda function version
  #   Value: !Ref SpekeHandlerLambdaVersion0DIRV4BrqTBJ4Z5rbv8Sxu4UDLYA9Nmd3pyfFQ8
  ServiceEndpoint:
    Description: URL of the service endpoint
    Value: !Join 
      - ''
      - - 'https://'
        - !Ref ApiGatewayRestApi
        - .execute-api.
        - !Ref 'AWS::Region'
        - .
        - !Ref 'AWS::URLSuffix'
        - /cpix
